// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  name String? 
  email String? @unique
  number String @unique
  password String
  Balance Balance[]
  OnRampTransaction OnRampTransaction[]
    sentTransfer p2pTransfer[] @relation(name: "SenderUserRelation")
  receivedTransfer p2pTransfer[] @relation(name: "ReceiverUserRelation")
}

model Merchant{
  id Int @id @default(autoincrement())
  email String @unique
  name String
  auth_type AuthType
}


// to keep track of all the balance of the users
model Balance{
 id Int @id @default(autoincrement())
 userId Int @unique
 amount Int
 locked Int
 user User @relation(fields: [userId], references: [id])
}

// transaction jo user bahar se add kar raha hai apne app mai 
// similarly we can have OffRampTransaction
model OnRampTransaction{
  id Int @id @default(autoincrement())
  status OnRampStatus
  token String @unique
  provider String
  amount Int
  startTime DateTime
  userId Int
  user User @relation(fields: [userId], references: [id])

}

model p2pTransfer{
  id Int @id @default(autoincrement())
  amount Int
  timestamp DateTime
  senderUserId Int
  senderUser User @relation(name:"SenderUserRelation",fields: [senderUserId],references: [id])
  receiverUserId Int
  receiverUser User @relation(name:"ReceiverUserRelation",fields: [receiverUserId],references: [id])
}

enum AuthType{
  GOOGLE
  GITHUB
}

enum OnRampStatus{
  SUCCESS
  FAILED
  PROCESSING
}
